#------------------------------------------------------------------------
#
# This part overrides settings from the kamon-core library
# https://github.com/kamon-io/Kamon/blob/master/kamon-core/src/main/resources/reference.conf
#
#------------------------------------------------------------------------

kamon {
  environment {

    # Identifier for this service.
    service = "otlp-test-app"

    # Identifier for the host where this service is running. If set to `auto` Kamon will resolve the hostname using
    # the resolved name for localhost.
    host = "auto"

    # Identifier for a particular instance of this service. If set to `auto` Kamon will use the pattern service@host.
    instance = "auto"

    # These will be added as Resource labels in the trace export
    tags {
      service-version = "x.x.x"
      service-namespace = "namespace-1"
      service-instance-id = "xxx-yyy"
      env = "staging"
      notset = ${?HOME}
    }
  }

  modules {
    # disable the status-page module
    # https://github.com/kamon-io/Kamon/blob/master/kamon-status-page/src/main/resources/reference.conf
    status-page.enabled = false

    # disable the host/process metrics. Makes no sense in containers
    # https://github.com/kamon-io/kamon-system-metrics/blob/master/src/main/resources/reference.conf
    host-metrics.enabled = false
    process-metrics.enabled = false
  }

  metric {
    # Interval at which metric snapshots will be collected and sent to all metric reporters.
    tick-interval = 10 seconds
  }

  trace {
    # Interval at which sampled finished spans will be flushed to SpanReporters.
    tick-interval = 5 seconds


    # Decide whether a new, locally created Span should have the same Span Identifier as it's remote parent (if any) or
    # get a new local identifier. Certain tracing systems use the same Span Identifier to represent both sides (client
    # and server) of a RPC call, if you are reporting data to such systems then this option should be enabled. This
    # option only affects spans with the tag "span.kind=server".
    #
    # If you are using Zipkin, keep this option enabled. If you are using Jaeger, disable it.
    join-remote-parents-with-same-span-id = yes

    # Configures what Scheme will be used for trace and span identifiers. The possible values are:
    #   single: Uses 8-byte identifiers for both traces and spans.
    #   double: Uses 16-byte identifiers for traces and 8-byte identifiers for spans.
    #     fqcn: You can use your own identifier scheme by providing its fully qualified class name in this setting. If
    #           a fqcn is provided please make sure that the provided class has a parameter-less constructor and take
    #           into account that even though tracing might be working perfectly, you should confirm whether your custom
    #           scheme will work fine with the SpanReporters that you plan to use.
    identifier-scheme = double

    # Decides whether to include the stack trace of a Throwable as the "error.stacktrace" Span tag when a Span is marked
    # as failed.
    include-error-stacktrace = yes

    # Turn off all automatic sampling.
    # In order to get a trace the client must send the X-B3-TraceId and X-B3-SpanId headers (with correct format/values) along with X-B3-Sampled=1
    # this would force a sampling as it circumvents the sampling decision which this setting controls
    sampler = "always"

    # Settings that influence the tags applied to the "span.processing-time" metric for all finished spans with metric
    # tracking enabled.
    #
    span-metric-tags {
      # When this option is enabled the metrics collected for Spans will automatically add a tag named "upstream.name"
      # to all Server and Consumer operation Spans with the name of the service that generated their parent Span, if
      # available. Kamon propagates the "upstream.name" tag by default on all propagation channels.
      upstream-service = false

      # When this option is enabled the metrics collected for Spans will automatically add a tag named "parentOperation"
      # with the name of the operation on the parent Span, if any.
      parent-operation = true
    }
  }

  #configure W3C context propagation
  propagation.http.default.entries {
    incoming.span = "w3c"
    outgoing.span = "w3c"
  }

  otel.trace {
    #port = 55690
    include-environment-tags = yes
  }
}
